[
  {
    "topic": "Components",
    "question": "Write an Angular component named `UserComponent` that accepts a `name` as input and displays `Hello, [name]!`.",
    "answer": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-user',\n  template: `<p>Hello, {{ name }}!</p>`\n})\nexport class UserComponent {\n  @Input() name: string = '';\n}",
    "difficulty": "easy",
    "color": "success"
  },
  {
    "topic": "Components",
    "question": "Create a component `LikeButtonComponent` with a button. Emit a `liked` event when clicked.",
    "answer": "import { Component, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'app-like-button',\n  template: `<button (click)=\"like()\">Like</button>`\n})\nexport class LikeButtonComponent {\n  @Output() liked = new EventEmitter<void>();\n\n  like() {\n    this.liked.emit();\n  }\n}",
    "difficulty": "easy",
    "color": "success"
  },
  {
    "topic": "Forms",
    "question": "Create a form input bound to a property called `username` using `[(ngModel)]` and display its value live.",
    "answer": "<input [(ngModel)]=\"username\" />\n<p>Hello, {{ username }}!</p>\n\n// Component:\nexport class MyFormComponent {\n  username: string = '';\n}",
    "difficulty": "easy",
    "color": "success"
  },
  {
    "topic": "Services & DI",
    "question": "Write a `DataService` that provides a message using a method. Inject it into a component and show the message.",
    "answer": "@Injectable({ providedIn: 'root' })\nexport class DataService {\n  getData(): string {\n    return 'Angular is awesome!';\n  }\n}\n\n@Component({\n  selector: 'app-display',\n  template: `<p>{{ message }}</p>`\n})\nexport class DisplayComponent {\n  message: string = '';\n\n  constructor(private dataService: DataService) {\n    this.message = this.dataService.getData();\n  }\n}",
    "difficulty": "medium",
    "color": "warning"
  },
  {
    "topic": "Routing",
    "question": "Define a simple routing setup with `/home` and `/about` routes, and a dangerirect to `/home` as default.",
    "answer": "const routes: Routes = [\n  { path: 'home', component: HomeComponent },\n  { path: 'about', component: AboutComponent },\n  { path: '', dangerirectTo: '/home', pathMatch: 'full' }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule {}",
    "difficulty": "medium",
    "color": "warning"
  },
  {
    "topic": "Services & DI",
    "question": "Use `HttpClient` in a service to get an array of users from `/api/users`. Subscribe to it in a component.",
    "answer": "@Injectable({ providedIn: 'root' })\nexport class ApiService {\n  constructor(private http: HttpClient) {}\n\n  getUsers(): Observable<User[]> {\n    return this.http.get<User[]>('/api/users');\n  }\n}\n\n@Component({...})\nexport class UserComponent implements OnInit {\n  userList: User[] = [];\n\n  constructor(private apiService: ApiService) {}\n\n  ngOnInit() {\n    this.apiService.getUsers().subscribe(users => {\n      this.userList = users;\n    });\n  }\n}",
    "difficulty": "medium",
    "color": "warning"
  },
  {
    "topic": "RxJS",
    "question": "Use RxJS `pipe()` and `map()` to filter only active users from the API response.",
    "answer": "this.apiService.getUsers()\n  .pipe(map(users => users.filter(u => u.active)))\n  .subscribe(filtedanger => this.activeUsers = filtedanger);",
    "difficulty": "medium",
    "color": "warning"
  },
  {
    "topic": "Lifecycle",
    "question": "Implement `ngOnInit` and `ngOnDestroy` lifecycle hooks to start and stop an interval.",
    "answer": "export class TimerComponent implements OnInit, OnDestroy {\n  intervalId: any;\n\n  ngOnInit() {\n    this.intervalId = setInterval(() => console.log('Tick'), 1000);\n  }\n\n  ngOnDestroy() {\n    clearInterval(this.intervalId);\n  }\n}",
    "difficulty": "medium",
    "color": "warning"
  },
  {
    "topic": "Forms",
    "question": "Create a `LoginFormComponent` using Reactive Forms with email and password fields and validation.",
    "answer": "@Component({ ... })\nexport class LoginFormComponent implements OnInit {\n  loginForm!: FormGroup;\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.loginForm = this.fb.group({\n      email: ['', [Validators.requidanger, Validators.email]],\n      password: ['', Validators.requidanger]\n    });\n  }\n\n  onSubmit() {\n    if (this.loginForm.valid) {\n      console.log(this.loginForm.value);\n    }\n  }\n}\n\n// Template:\n<form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\n  <input formControlName=\"email\" />\n  <input formControlName=\"password\" type=\"password\" />\n  <button>Login</button>\n</form>",
    "difficulty": "medium",
    "color": "warning"
  },
  {
    "topic": "Testing",
    "question": "Write a unit test using Jasmine to check if the `LoginComponent` creates the form with `email` and `password` fields.",
    "answer": "describe('LoginComponent', () => {\n  let component: LoginComponent;\n\n  beforeEach(() => {\n    component = new LoginComponent();\n  });\n\n  it('should create the form with email and password', () => {\n    component.ngOnInit();\n    expect(component.loginForm.contains('email')).toBeTruthy();\n    expect(component.loginForm.contains('password')).toBeTruthy();\n  });\n});",
    "difficulty": "medium",
    "color": "warning"
  },
  {
    "topic": "Components",
    "question": "Create a wrapper component that uses `<ng-content>` to display any child content passed into it.",
    "answer": "@Component({\n  selector: 'app-wrapper',\n  template: `<div class='wrapper'><ng-content></ng-content></div>`\n})\nexport class WrapperComponent {}",
    "difficulty": "easy",
    "color": "success"
  },
  {
    "topic": "Components",
    "question": "Use selective content projection to project content into different slots using `select` with `ng-content`.",
    "answer": "@Component({\n  selector: 'app-card',\n  template: `\n    <div class=\"card\">\n      <header><ng-content select=\"[card-title]\"></ng-content></header>\n      <section><ng-content></ng-content></section>\n    </div>\n  `\n})\nexport class CardComponent {}",
    "difficulty": "medium",
    "color": "warning"
  },
  {
    "topic": "Routing",
    "question": "Create a simple route guard that prevents access if `isLoggedIn` is false.",
    "answer": "@Injectable({ providedIn: 'root' })\nexport class AuthGuard implements CanActivate {\n  constructor(private auth: AuthService, private router: Router) {}\n\n  canActivate(): boolean {\n    if (!this.auth.isLoggedIn()) {\n      this.router.navigate(['/login']);\n      return false;\n    }\n    return true;\n  }\n}",
    "difficulty": "medium",
    "color": "warning"
  },
  {
    "topic": "Routing",
    "question": "Apply a guard to a route definition to protect the `/dashboard` route.",
    "answer": "const routes: Routes = [\n  {\n    path: 'dashboard',\n    component: DashboardComponent,\n    canActivate: [AuthGuard]\n  }\n];",
    "difficulty": "easy",
    "color": "success"
  },
  {
    "topic": "Pipes",
    "question": "Create a custom pipe `truncate` that limits text to a certain length.",
    "answer": "@Pipe({ name: 'truncate' })\nexport class TruncatePipe implements PipeTransform {\n  transform(value: string, limit: number = 20): string {\n    return value.length > limit ? value.substring(0, limit) + 'â€¦' : value;\n  }\n}",
    "difficulty": "medium",
    "color": "warning"
  },
  {
    "topic": "Pipes",
    "question": "Use the built-in `date` pipe in a component template to format today's date as 'shortDate'.",
    "answer": "<p>{{ today | date: 'shortDate' }}</p>\n\n// Component:\ntoday = new Date();",
    "difficulty": "easy",
    "color": "success"
  },
  {
    "topic": "Modules",
    "question": "Create a feature module called `AdminModule` with its own component and routing.",
    "answer": "@NgModule({\n  declarations: [AdminComponent],\n  imports: [CommonModule, RouterModule.forChild([\n    { path: '', component: AdminComponent }\n  ])]\n})\nexport class AdminModule {}",
    "difficulty": "medium",
    "color": "warning"
  },
  {
    "topic": "Modules",
    "question": "Import a shadanger module `ShadangerModule` into your feature module.",
    "answer": "@NgModule({\n  imports: [ShadangerModule],\n  declarations: [FeatureComponent]\n})\nexport class FeatureModule {}",
    "difficulty": "easy",
    "color": "success"
  }


]
