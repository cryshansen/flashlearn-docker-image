{
  "title" : "Sort Puzzles",
  "author" : "Crystal Hansen",
  "pages" : [ {
    "title" : "Reverse Words in Sentence",
    "problem" : "'I love code' → 'code love I'",
    "idea" : "Split by spaces, reverse list, join back.",
    "code" : "words = split(s, ' ')\nreverse(words)\nreturn join(words, ' ')",
    "title_audio" : "puzzle_t_1-output.mp3",
    "problem_audio" : "puzzle_p_1-output.mp3",
    "idea_audio" : "puzzle_i_1-output.mp3",
    "code_audio" : "puzzle_c_1-output.mp3"
  }, {
    "title" : "Check Anagram",
    "problem" : "'listen' & 'silent' → true",
    "idea" : "Sort letters or count frequencies.",
    "code" : "if sorted(s1) == sorted(s2): return true",
    "title_audio" : "puzzle_t_2-output.mp3",
    "problem_audio" : "puzzle_p_2-output.mp3",
    "idea_audio" : "puzzle_i_2-output.mp3",
    "code_audio" : "puzzle_c_2-output.mp3"
  }, {
    "title" : "First Non-Repeating Character",
    "problem" : "'swiss' → 'w'",
    "idea" : "Count frequencies, return first with count=1",
    "code" : "counts = {}\nfor c in s: counts[c] = counts.get(c,0)+1\nfor c in s:\n    if counts[c] == 1: return c",
    "title_audio" : "puzzle_t_3-output.mp3",
    "problem_audio" : "puzzle_p_3-output.mp3",
    "idea_audio" : "puzzle_i_3-output.mp3",
    "code_audio" : "puzzle_c_3-output.mp3"
  }, {
    "title" : "Remove Duplicates",
    "problem" : "'banana' → 'ban'",
    "idea" : "Track seen characters",
    "code" : "seen = set()\nresult = ''\nfor c in s:\n    if c not in seen:\n        result += c\n        seen.add(c)",
    "title_audio" : "puzzle_t_4-output.mp3",
    "problem_audio" : "puzzle_p_4-output.mp3",
    "idea_audio" : "puzzle_i_4-output.mp3",
    "code_audio" : "puzzle_c_4-output.mp3"
  }, {
    "title" : "Check Substring",
    "problem" : "'hello world', 'world' → true",
    "idea" : "Slide over string and compare",
    "code" : "for i in 0..len(s)-len(sub):\n    if s[i:i+len(sub)] == sub: return true",
    "title_audio" : "puzzle_t_5-output.mp3",
    "problem_audio" : "puzzle_p_5-output.mp3",
    "idea_audio" : "puzzle_i_5-output.mp3",
    "code_audio" : "puzzle_c_5-output.mp3"
  }, {
    "title" : "Longest Common Prefix",
    "problem" : "['flower','flow','flight'] → 'fl'",
    "idea" : "Compare characters column by column",
    "code" : "prefix = ''\nfor i in 0..minlen:\n    if all words have same char at i: prefix += char\n    else: break",
    "title_audio" : "puzzle_t_6-output.mp3",
    "problem_audio" : "puzzle_p_6-output.mp3",
    "idea_audio" : "puzzle_i_6-output.mp3",
    "code_audio" : "puzzle_c_6-output.mp3"
  }, {
    "title" : "String Compression",
    "problem" : "'aaabbc' → 'a3b2c1'",
    "idea" : "Count consecutive characters",
    "code" : "count = 1\nfor i in 1..len(s):\n    if s[i] == s[i-1]: count++\n    else: output += s[i-1]+count; count=1",
    "title_audio" : "puzzle_t_7-output.mp3",
    "problem_audio" : "puzzle_p_7-output.mp3",
    "idea_audio" : "puzzle_i_7-output.mp3",
    "code_audio" : "puzzle_c_7-output.mp3"
  }, {
    "title" : "Reverse Array In-Place",
    "problem" : "[1,2,3,4] → [4,3,2,1]",
    "idea" : "Swap ends moving inward",
    "code" : "left=0, right=len-1\nwhile left<right:\n    swap(arr[left], arr[right])\n    left++, right--",
    "title_audio" : "puzzle_t_8-output.mp3",
    "problem_audio" : "puzzle_p_8-output.mp3",
    "idea_audio" : "puzzle_i_8-output.mp3",
    "code_audio" : "puzzle_c_8-output.mp3"
  }, {
    "title" : "Rotate Array by K Steps",
    "problem" : "[1,2,3,4,5], k=2 → [4,5,1,2,3]",
    "idea" : "Reverse whole array, reverse parts",
    "code" : "reverse(arr)\nreverse(first k)\nreverse(rest)",
    "title_audio" : "puzzle_t_9-output.mp3",
    "problem_audio" : "puzzle_p_9-output.mp3",
    "idea_audio" : "puzzle_i_9-output.mp3",
    "code_audio" : "puzzle_c_9-output.mp3"
  }, {
    "title" : "Move Zeros",
    "problem" : "[0,1,0,3,12] → [1,3,12,0,0]",
    "idea" : "Keep index for next non-zero",
    "code" : "pos=0\nfor i in 0..n:\n    if arr[i]!=0: swap(arr[pos],arr[i]); pos++",
    "title_audio" : "puzzle_t_10-output.mp3",
    "problem_audio" : "puzzle_p_10-output.mp3",
    "idea_audio" : "puzzle_i_10-output.mp3",
    "code_audio" : "puzzle_c_10-output.mp3"
  }, {
    "title" : "Find Missing Number",
    "problem" : "[1,2,4,5] → 3",
    "idea" : "Use sum formula vs actual sum",
    "code" : "n=len(arr)+1\nexpected=n*(n+1)/2\nreturn expected-sum(arr)",
    "title_audio" : "puzzle_t_11-output.mp3",
    "problem_audio" : "puzzle_p_11-output.mp3",
    "idea_audio" : "puzzle_i_11-output.mp3",
    "code_audio" : "puzzle_c_11-output.mp3"
  }, {
    "title" : "Find Duplicate Number",
    "problem" : "[1,3,4,2,2] → 2",
    "idea" : "Use set or cycle detection",
    "code" : "seen = set()\nfor num in arr:\n    if num in seen: return num\n    seen.add(num)",
    "title_audio" : "puzzle_t_12-output.mp3",
    "problem_audio" : "puzzle_p_12-output.mp3",
    "idea_audio" : "puzzle_i_12-output.mp3",
    "code_audio" : "puzzle_c_12-output.mp3"
  }, {
    "title" : "Maximum Subarray (Kadane)",
    "problem" : "[-2,1,-3,4,-1,2,1,-5,4] → max sum 6",
    "idea" : "Track current sum and max sum",
    "code" : "max_sum=arr[0]\ncurr=arr[0]\nfor i in 1..n:\n    curr=max(arr[i],curr+arr[i])\n    max_sum=max(max_sum,curr)",
    "title_audio" : "puzzle_t_13-output.mp3",
    "problem_audio" : "puzzle_p_13-output.mp3",
    "idea_audio" : "puzzle_i_13-output.mp3",
    "code_audio" : "puzzle_c_13-output.mp3"
  }, {
    "title" : "Merge Two Sorted Arrays",
    "problem" : "[1,3,5] & [2,4,6] → [1,2,3,4,5,6]",
    "idea" : "Use two pointers to merge",
    "code" : "i=j=0\nwhile i<len1 and j<len2:\n    if arr1[i]<arr2[j]: output.push(arr1[i++])\n    else: output.push(arr2[j++])",
    "title_audio" : "puzzle_t_14-output.mp3",
    "problem_audio" : "puzzle_p_14-output.mp3",
    "idea_audio" : "puzzle_i_14-output.mp3",
    "code_audio" : "puzzle_c_14-output.mp3"
  }, {
    "title" : "Binary Search",
    "problem" : "Search target in sorted array",
    "idea" : "Divide & conquer",
    "code" : "low=0, high=n-1\nwhile low<=high:\n    mid=(low+high)/2\n    if arr[mid]==target: return mid\n    if arr[mid]<target: low=mid+1\n    else: high=mid-1",
    "title_audio" : "puzzle_t_15-output.mp3",
    "problem_audio" : "puzzle_p_15-output.mp3",
    "idea_audio" : "puzzle_i_15-output.mp3",
    "code_audio" : "puzzle_c_15-output.mp3"
  } ]
}