{
  "title": "Sort Puzzles",
  "author": "Crystal Hansen",
  "pages": [
    {
      "title": "Reverse Words in Sentence",
      "problem": "'I love code' → 'code love I'",
      "idea": "Split by spaces, reverse list, join back.",
      "code": "words = split(s, ' ')\nreverse(words)\nreturn join(words, ' ')"
    },
    {
      "title": "Check Anagram",
      "problem": "'listen' & 'silent' → true",
      "idea": "Sort letters or count frequencies.",
      "code": "if sorted(s1) == sorted(s2): return true"
    },
    {
      "title": "First Non-Repeating Character",
      "problem": "'swiss' → 'w'",
      "idea": "Count frequencies, return first with count=1",
      "code": "counts = {}\nfor c in s: counts[c] = counts.get(c,0)+1\nfor c in s:\n    if counts[c] == 1: return c"
    },
    {
      "title": "Remove Duplicates",
      "problem": "'banana' → 'ban'",
      "idea": "Track seen characters",
      "code": "seen = set()\nresult = ''\nfor c in s:\n    if c not in seen:\n        result += c\n        seen.add(c)"
    },
    {
      "title": "Check Substring",
      "problem": "'hello world', 'world' → true",
      "idea": "Slide over string and compare",
      "code": "for i in 0..len(s)-len(sub):\n    if s[i:i+len(sub)] == sub: return true"
    },
    {
      "title": "Longest Common Prefix",
      "problem": "['flower','flow','flight'] → 'fl'",
      "idea": "Compare characters column by column",
      "code": "prefix = ''\nfor i in 0..minlen:\n    if all words have same char at i: prefix += char\n    else: break"
    },
    {
      "title": "String Compression",
      "problem": "'aaabbc' → 'a3b2c1'",
      "idea": "Count consecutive characters",
      "code": "count = 1\nfor i in 1..len(s):\n    if s[i] == s[i-1]: count++\n    else: output += s[i-1]+count; count=1"
    },
    {
      "title": "Reverse Array In-Place",
      "problem": "[1,2,3,4] → [4,3,2,1]",
      "idea": "Swap ends moving inward",
      "code": "left=0, right=len-1\nwhile left<right:\n    swap(arr[left], arr[right])\n    left++, right--"
    },
    {
      "title": "Rotate Array by K Steps",
      "problem": "[1,2,3,4,5], k=2 → [4,5,1,2,3]",
      "idea": "Reverse whole array, reverse parts",
      "code": "reverse(arr)\nreverse(first k)\nreverse(rest)"
    },
    {
      "title": "Move Zeros",
      "problem": "[0,1,0,3,12] → [1,3,12,0,0]",
      "idea": "Keep index for next non-zero",
      "code": "pos=0\nfor i in 0..n:\n    if arr[i]!=0: swap(arr[pos],arr[i]); pos++"
    },
    {
      "title": "Find Missing Number",
      "problem": "[1,2,4,5] → 3",
      "idea": "Use sum formula vs actual sum",
      "code": "n=len(arr)+1\nexpected=n*(n+1)/2\nreturn expected-sum(arr)"
    },
    {
      "title": "Find Duplicate Number",
      "problem": "[1,3,4,2,2] → 2",
      "idea": "Use set or cycle detection",
      "code": "seen = set()\nfor num in arr:\n    if num in seen: return num\n    seen.add(num)"
    },
    {
      "title": "Maximum Subarray (Kadane)",
      "problem": "[-2,1,-3,4,-1,2,1,-5,4] → max sum 6",
      "idea": "Track current sum and max sum",
      "code": "max_sum=arr[0]\ncurr=arr[0]\nfor i in 1..n:\n    curr=max(arr[i],curr+arr[i])\n    max_sum=max(max_sum,curr)"
    },
    {
      "title": "Merge Two Sorted Arrays",
      "problem": "[1,3,5] & [2,4,6] → [1,2,3,4,5,6]",
      "idea": "Use two pointers to merge",
      "code": "i=j=0\nwhile i<len1 and j<len2:\n    if arr1[i]<arr2[j]: output.push(arr1[i++])\n    else: output.push(arr2[j++])"
    },
    {
      "title": "Binary Search",
      "problem": "Search target in sorted array",
      "idea": "Divide & conquer",
      "code": "low=0, high=n-1\nwhile low<=high:\n    mid=(low+high)/2\n    if arr[mid]==target: return mid\n    if arr[mid]<target: low=mid+1\n    else: high=mid-1"
    }
  ]
}
