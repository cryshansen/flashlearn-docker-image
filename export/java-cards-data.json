[ {
  "difficulty" : "easy",
  "question" : "What is the difference between HashMap and TreeMap?",
  "answer" : "<strong>HashMap</strong> <u>uses</u> <strong>hashing</strong> and <u>provides</u> <strong>O(1) lookup</strong>, whereas <strong>TreeMap</strong> is a <strong>Red-Black tree</strong> <u>providing</u> <strong>O(log n)</strong> <strong>operations</strong> with <strong>sorted keys</strong>.",
  "color" : "success",
  "topic" : "Core Java",
  "answer_audio_path" : "audio/1/117_answer.mp3",
  "question_audio_path" : "audio/1/117_question.mp3"
}, {
  "difficulty" : "easy",
  "question" : "What is the difference between final on variables, objects, methods, and classes?",
  "answer" : "<ul><li><strong>final variable:</strong> Once assigned, its value cannot be reassigned.</li>  <li><strong>final object reference:</strong> The ref cannot refer to another object, but internal state object values change.</li><li><strong>final method:</strong> Cannot be overridden by subclasses.</li><li><strong>final class:</strong> Cannot be extended (no inheritance).</li></ul>",
  "color" : "success",
  "topic" : "Core Java",
  "answer_audio_path" : "audio/1/118_answer.mp3",
  "question_audio_path" : "audio/1/118_question.mp3"
}, {
  "difficulty" : "medium",
  "question" : "What is the Reflections API used for?",
  "answer" : "It <u>allows</u> <u>inspection</u> and <u>modification</u> of <strong>classes</strong>, <strong>methods</strong>, and <strong>fields</strong> at runtime — <u>used</u> in <strong>frameworks</strong> like <strong>Spring</strong> for <strong>dependency injection</strong> and <strong>annotation scanning</strong>.",
  "color" : "warning",
  "topic" : "Core Java",
  "answer_audio_path" : "audio/1/119_answer.mp3",
  "question_audio_path" : "audio/1/119_question.mp3"
}, {
  "difficulty" : "hard",
  "question" : "What is the Java Memory Model and how does garbage collection work?",
  "answer" : "The <strong>Java Memory Model</strong> <u>defines</u> how <strong>threads</strong> <u>interact</u> with <strong>memory</strong>. The <strong>JVM</strong> <u>manages</u> <strong>memory</strong> with the <strong>heap</strong> and <strong>stack</strong>, and <strong>garbage collection</strong> <u>reclaims</u> <strong>memory</strong> from <u>unreachable</u> <strong>objects</strong> using <strong>algorithms</strong> like <strong>G1</strong>, <strong>CMS</strong>, or <strong>Serial GC</strong>.",
  "color" : "danger",
  "topic" : "Core Java",
  "answer_audio_path" : "audio/1/120_answer.mp3",
  "question_audio_path" : "audio/1/120_question.mp3"
}, {
  "difficulty" : "easy",
  "question" : "How do Java 8 Streams improve code?",
  "answer" : "They <u>allow</u> <strong>functional-style operations</strong> on <strong>collections</strong>, <u>enabling</u> concise, readable, and parallelizable <strong>code</strong> using <strong>methods</strong> like <code>map</code>, <code>filter</code>, <code>reduce</code>.",
  "color" : "success",
  "topic" : "Core Java",
  "answer_audio_path" : "audio/1/121_answer.mp3",
  "question_audio_path" : "audio/1/121_question.mp3"
}, {
  "difficulty" : "medium",
  "question" : "What is functional programming in Java?",
  "answer" : "It <u>emphasizes</u> <strong>immutability</strong>, <strong>pure functions</strong>, and <strong>stateless behavior</strong>. Java 8 <u>introduced</u> <strong>lambdas</strong> and <strong>functional interfaces</strong> (e.g., <code>Function</code>, <code>Predicate</code>) to <u>support</u> this style.",
  "color" : "warning",
  "topic" : "Core Java",
  "answer_audio_path" : "audio/1/122_answer.mp3",
  "question_audio_path" : "audio/1/122_question.mp3"
}, {
  "difficulty" : "easy",
  "question" : "What are the responsibilities of each layer in MVC?",
  "answer" : "<strong>Model</strong> <u>handles</u> <strong>data</strong> and <strong>logic</strong>, <strong>View</strong> <u>renders</u> <strong>UI</strong>, <strong>Controller</strong> <u>handles</u> <strong>input</strong> and <u>orchestrates</u> between <strong>model</strong> and <strong>view</strong>.",
  "color" : "success",
  "topic" : "Design Principles",
  "answer_audio_path" : "audio/1/123_answer.mp3",
  "question_audio_path" : "audio/1/123_question.mp3"
}, {
  "difficulty" : "medium",
  "question" : "What is cache eviction and name common strategies?",
  "answer" : "<strong>Eviction</strong> <u>removes</u> old <strong>entries</strong> when <strong>cache</strong> is full. Common <strong>strategies</strong>: <strong>LRU</strong> (Least Recently Used), <strong>FIFO</strong>, <strong>LFU</strong> (Least Frequently Used).",
  "color" : "warning",
  "topic" : "Caching",
  "answer_audio_path" : "audio/1/124_answer.mp3",
  "question_audio_path" : "audio/1/124_question.mp3"
}, {
  "difficulty" : "hard",
  "question" : "What is the difference between write-through and write-back caching?",
  "answer" : "<strong>Write-through</strong> <u>writes</u> <strong>data</strong> to both <strong>cache</strong> and <strong>DB</strong> instantly; <strong>write-back</strong> <u>delays</u> <strong>DB write</strong> until <strong>eviction</strong> for performance.",
  "color" : "danger",
  "topic" : "Caching",
  "answer_audio_path" : "audio/1/125_answer.mp3",
  "question_audio_path" : "audio/1/125_question.mp3"
}, {
  "difficulty" : "medium",
  "question" : "What is the difference between synchronized block and synchronized method in Java?",
  "answer" : "Both <u>prevent</u> <strong>concurrent access</strong>, but <strong>synchronized block</strong> can <u>limit</u> <strong>locking scope</strong> for better <strong>performance</strong>.",
  "color" : "warning",
  "topic" : "Multithreading",
  "answer_audio_path" : "audio/1/126_answer.mp3",
  "question_audio_path" : "audio/1/126_question.mp3"
}, {
  "difficulty" : "medium",
  "question" : "What is a deadlock?",
  "answer" : "A <strong>deadlock</strong> is a situation where two or more <strong>threads</strong> are <u>blocked</u> forever, each <u>waiting</u> on a <strong>resource</strong> held by the other.",
  "color" : "warning",
  "topic" : "Multithreading",
  "answer_audio_path" : "audio/1/127_answer.mp3",
  "question_audio_path" : "audio/1/127_question.mp3"
}, {
  "difficulty" : "medium",
  "question" : "What is tail recursion?",
  "answer" : "A <strong>recursion</strong> where the <strong>recursive call</strong> is the last <strong>statement</strong>. It can be <u>optimized</u> by the <strong>compiler</strong> to <u>reuse</u> the current <strong>stack frame</strong>.",
  "color" : "warning",
  "topic" : "Recursion",
  "answer_audio_path" : "audio/1/128_answer.mp3",
  "question_audio_path" : "audio/1/128_question.mp3"
}, {
  "difficulty" : "hard",
  "question" : "How do you prevent stack overflow in recursive functions?",
  "answer" : "<u>Use</u> <strong>tail recursion</strong> if supported, <u>limit</u> <strong>depth</strong>, or <u>convert</u> to <strong>iteration</strong> (loop-based solution).",
  "color" : "danger",
  "topic" : "Recursion",
  "answer_audio_path" : "audio/1/129_answer.mp3",
  "question_audio_path" : "audio/1/129_question.mp3"
}, {
  "difficulty" : "hard",
  "question" : "When Do You Use or Think About Garbage Collection?",
  "answer" : "<strong>Memory leaks</strong> in long-lived <strong>apps</strong>: <u>referencing</u> <strong>objects</strong> no longer needed (e.g., <u>adding</u> to a static list and never <u>removing</u>) means GC won’t <u>collect</u> them. Use case: <strong>servers</strong> or <strong>desktop apps</strong> where <strong>memory</strong> slowly <u>builds up</u>. And for <strong>performance tuning</strong>: <u>tune</u> GC for large apps (e.g., <strong>high-frequency trading</strong> apps).",
  "color" : "danger",
  "topic" : "Core Java",
  "answer_audio_path" : "audio/1/130_answer.mp3",
  "question_audio_path" : "audio/1/130_question.mp3"
} ]